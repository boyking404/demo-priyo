name: merger

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review, assigned, labelled, edited]

  schedule:
    - cron: '0 18 * * *'  # 12 AM midnight in IST (18:00 UTC)
    - cron: '0 0 * * *'   # 6 AM afternoon in IST (00:00 UTC)
    - cron: '0 6 * * *'  # 12 PM midnight in IST (6:00 UTC)
    - cron: '0 12 * * *'   # 6 PM afternoon in IST (12:00 UTC)

  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pull-requests: write

jobs:
  auto-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Get open PRs
        id: get_prs
        run: |
          echo "Checking GitHub CLI version:"
          gh --version
          
          echo "Listing open PRs:"
          gh pr list --state open
          
          echo "Attempting to get PR numbers:"
          PR_LIST=$(gh pr list --state open --json number --jq '.[].number' || echo "")
          echo "Raw PR_LIST output: $PR_LIST"
          
          if [ -z "$PR_LIST" ]; then
            echo "No PRs found or error occurred."
            echo "pr_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "pr_list=$PR_LIST" >> $GITHUB_OUTPUT
          PR_COUNT=$(echo "$PR_LIST" | wc -w)
          echo "PR count: $PR_COUNT"
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$PR_COUNT" -eq 0 ]; then
            echo "No open PRs found. Exiting workflow."
            exit 0
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Process PRs
        if: steps.get_prs.outputs.pr_count > 0
        run: |
          for PR_NUMBER in ${{ steps.get_prs.outputs.pr_list }}; do
            echo "Processing PR #$PR_NUMBER"

            # Add "open-odyssey" label to all PRs
            gh pr edit $PR_NUMBER --add-label "open-odyssey"
            
            # Check PR structure and rules
            PR_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path')
            PR_CHANGES=$(gh pr view ${{ github.event.pull_request.number }} --json additions,deletions --jq '(.additions + .deletions)')
            FILE_COUNT=$(echo "$PR_FILES" | wc -l)
            VALID=true
            REASONS=""

            # Check if all files are within a single directory in the root
            ROOT_DIR=$(echo "$PR_FILES" | cut -d'/' -f1 | sort -u)
            if [ $(echo "$ROOT_DIR" | wc -l) -ne 1 ] || [ -z "$ROOT_DIR" ] || [ "$ROOT_DIR" = "." ]; then
              VALID=false
              REASONS+="- Files are not within a single directory in the root.\n"
            fi

            # Check if the directory name is valid (alphanumeric, hyphens, and underscores only)
            if ! [[ $ROOT_DIR =~ ^[a-zA-Z0-9_-]+$ ]]; then
              VALID=false
              REASONS+="- Invalid directory name or folder structure.\n"
            fi

            # Check for node_modules or venv folders
            if echo "$PR_FILES" | grep -qE '(node_modules|venv)/'; then
              VALID=false
              REASONS+="- 'node_modules' or 'venv' folders found in the PR.\n"
            fi

            # Check for merge conflicts
            if gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq '.mergeable' | grep -q false; then
              VALID=false
              REASONS+="- PR has merge conflicts.\n"
            fi

            # Check for spaces at the beginning or end of folder names
            if echo "$PR_FILES" | grep -qE '(^| )/| /|/ |/$'; then
              VALID=false
              REASONS+="- Spaces found at the beginning or end of folder names in file paths.\n"
            fi

            # Check for absence of .py files and presence of web-related files
            if echo "$PR_FILES" | grep -qE '\.py$'; then
              VALID=false
            fi
            if ! echo "$PR_FILES" | grep -qE '\.(html|css|js|jsx|ts|tsx)$'; then
              VALID=false
            fi

            # Check for minimum 300 lines changed and maximum 100 files (no comment added)
            if [ $PR_CHANGES -lt 10 ] || [ $FILE_COUNT -gt 100 ]; then
              VALID=false
            fi

            if [ "$VALID" = true ]; then
              echo "PR #$PR_NUMBER is valid. Attempting to merge."
              if gh pr view $PR_NUMBER --json labels --jq '.labels[].name' | grep -q "waiting room"; then
                echo "Removing 'waiting room' label"
                gh pr edit $PR_NUMBER --remove-label "waiting room"
              fi
              gh pr edit $PR_NUMBER --add-label "dino-accepted"
              gh pr merge $PR_NUMBER --auto --merge
            else
              echo "PR #$PR_NUMBER is invalid. Adding comment and label."
              gh pr edit $PR_NUMBER --add-label "waiting room"
              REASONS=$(echo -e "$REASONS" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
              gh pr comment $PR_NUMBER --body-file - <<EOF
            This pull request does not meet the required structure or rules. Please address the following issues:
            $REASONS
            EOF
            fi
          done  
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Add open-odyssey label
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --add-label "open-odyssey" 
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          
      - name: Auto-merge pull request
        if: steps.check_pr.outputs.valid == 'true'
        
        run: |
          # Check if "waiting room" label exists and remove it
          if gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -q "waiting room"; then
            echo "Removing 'waiting room' label"
            gh pr edit ${{ github.event.pull_request.number }} --remove-label "waiting room"
          fi
          
          # Add "dino-accepted" label
          gh pr edit ${{ github.event.pull_request.number }} --add-label "dino-accepted"
          
          # Attempt to merge the PR
          gh pr merge ${{ github.event.pull_request.number }} --auto --merge
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Label on invalid PR
        if: steps.check_pr.outputs.valid == 'false'
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --add-label "waiting room"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Comment on invalid PR
        if: steps.check_pr.outputs.valid == 'false' && steps.check_pr.outputs.reasons != ''
        run: |
          REASONS=$(echo -e "${{ steps.check_pr.outputs.reasons }}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          gh pr comment ${{ github.event.pull_request.number }} --body-file - <<EOF
          This pull request does not meet the required structure or rules. Please address the following issues:
          $REASONS
          EOF
        env:
          GH_TOKEN: ${{ secrets.PAT }}
